/*
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionDetail {
    #[serde(rename = "id")]
    pub id: String,
    /// The transaction date in ISO format (e.g. 2016-12-01)
    #[serde(rename = "date")]
    pub date: String,
    /// The transaction amount in milliunits format
    #[serde(rename = "amount")]
    pub amount: i64,
    #[serde(rename = "memo")]
    pub memo: String,
    /// The cleared status of the transaction
    #[serde(rename = "cleared")]
    pub cleared: String,
    /// Whether or not the transaction is approved
    #[serde(rename = "approved")]
    pub approved: bool,
    /// The transaction flag
    #[serde(rename = "flag_color")]
    pub flag_color: String,
    #[serde(rename = "account_id")]
    pub account_id: String,
    #[serde(rename = "payee_id")]
    pub payee_id: String,
    #[serde(rename = "category_id")]
    pub category_id: String,
    /// If a transfer transaction, the account to which it transfers
    #[serde(rename = "transfer_account_id")]
    pub transfer_account_id: String,
    /// If a transfer transaction, the id of transaction on the other side of the transfer
    #[serde(rename = "transfer_transaction_id")]
    pub transfer_transaction_id: String,
    /// If transaction is matched, the id of the matched transaction
    #[serde(rename = "matched_transaction_id")]
    pub matched_transaction_id: String,
    /// If the Transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
    #[serde(rename = "import_id")]
    pub import_id: String,
    /// Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
    #[serde(rename = "deleted")]
    pub deleted: bool,
    #[serde(rename = "account_name")]
    pub account_name: String,
    #[serde(rename = "payee_name")]
    pub payee_name: String,
    #[serde(rename = "category_name")]
    pub category_name: String,
    /// If a split transaction, the subtransactions.
    #[serde(rename = "subtransactions")]
    pub subtransactions: Vec<::models::SubTransaction>,
}

impl TransactionDetail {
    pub fn new(id: String, date: String, amount: i64, memo: String, cleared: String, approved: bool, flag_color: String, account_id: String, payee_id: String, category_id: String, transfer_account_id: String, transfer_transaction_id: String, matched_transaction_id: String, import_id: String, deleted: bool, account_name: String, payee_name: String, category_name: String, subtransactions: Vec<::models::SubTransaction>) -> TransactionDetail {
        TransactionDetail {
            id: id,
            date: date,
            amount: amount,
            memo: memo,
            cleared: cleared,
            approved: approved,
            flag_color: flag_color,
            account_id: account_id,
            payee_id: payee_id,
            category_id: category_id,
            transfer_account_id: transfer_account_id,
            transfer_transaction_id: transfer_transaction_id,
            matched_transaction_id: matched_transaction_id,
            import_id: import_id,
            deleted: deleted,
            account_name: account_name,
            payee_name: payee_name,
            category_name: category_name,
            subtransactions: subtransactions,
        }
    }
}

/// The cleared status of the transaction
#[derive(Debug, Serialize, Deserialize)]
pub enum Cleared {
    #[serde(rename = "cleared")]
    Cleared,
    #[serde(rename = "uncleared")]
    Uncleared,
    #[serde(rename = "reconciled")]
    Reconciled,
}
/// The transaction flag
#[derive(Debug, Serialize, Deserialize)]
pub enum FlagColor {
    #[serde(rename = "red")]
    Red,
    #[serde(rename = "orange")]
    Orange,
    #[serde(rename = "yellow")]
    Yellow,
    #[serde(rename = "green")]
    Green,
    #[serde(rename = "blue")]
    Blue,
    #[serde(rename = "purple")]
    Purple,
}

