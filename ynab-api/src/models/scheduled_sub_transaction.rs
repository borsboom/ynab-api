/*
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct ScheduledSubTransaction {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "scheduled_transaction_id")]
    pub scheduled_transaction_id: String,
    /// The scheduled subtransaction amount in milliunits format
    #[serde(rename = "amount")]
    pub amount: i64,
    #[serde(rename = "memo")]
    pub memo: String,
    #[serde(rename = "payee_id")]
    pub payee_id: String,
    #[serde(rename = "category_id")]
    pub category_id: String,
    /// If a transfer, the account_id which the scheduled subtransaction transfers to
    #[serde(rename = "transfer_account_id")]
    pub transfer_account_id: String,
    /// Whether or not the scheduled subtransaction has been deleted.  Deleted scheduled subtransactions will only be included in delta requests.
    #[serde(rename = "deleted")]
    pub deleted: bool,
}

impl ScheduledSubTransaction {
    pub fn new(id: String, scheduled_transaction_id: String, amount: i64, memo: String, payee_id: String, category_id: String, transfer_account_id: String, deleted: bool) -> ScheduledSubTransaction {
        ScheduledSubTransaction {
            id: id,
            scheduled_transaction_id: scheduled_transaction_id,
            amount: amount,
            memo: memo,
            payee_id: payee_id,
            category_id: category_id,
            transfer_account_id: transfer_account_id,
            deleted: deleted,
        }
    }
}


